generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  STUDENT
  TEACHER
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  token     String?   @unique
  role      Role      @default(USER)
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Admin      Admin?
  Teacher    Teacher?
  Student    Student?
  Enrollment Enrollment[]

  @@map("user")
}

model Admin {
  id        Int       @id @default(autoincrement())
  noAdmin   String    @unique @map("no_admin")
  name      String
  userId    Int       @unique @map("user_id")
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  User User @relation(fields: [userId], references: [id])

  @@map("admin")
}

enum StudentStatusEnum {
  ACTIVE
  INACTIVE
  DROP_OUT
  GRADUATED
  ON_LEAVE
}

model Student {
  id              Int                @id @default(autoincrement())
  fullName        String             @map("full_name")
  dateOfBirth     DateTime?          @map("date_of_birth")
  noTelp          String?            @map("no_telp")
  lastEducation   Education?         @map("last_education")
  motivation      String
  userId          Int                @unique @map("user_id")
  levelId         Int?               @map("level_id")
  classId         Int?               @map("class_id")
  enrollmentId    Int                @map("enrollment_id")
  studentStatus   StudentStatusEnum? @default(INACTIVE) @map("student_status")
  classScheduleId Int?               @map("class_schedule_id")
  createdAt       DateTime?          @default(now()) @map("created_at")
  createdBy       Int?               @map("created_by")
  updatedAt       DateTime?          @updatedAt @map("updated_at")
  updatedBy       Int?               @map("updated_by")

  User          User           @relation(fields: [userId], references: [id])
  Level         Level?         @relation(fields: [levelId], references: [id])
  Class         Class?         @relation(fields: [classId], references: [id])
  Enrollment    Enrollment     @relation(fields: [enrollmentId], references: [id])
  Scores        Score[]
  Attendances   Attendance[]
  Bills         Bill[]
  Transaction   Transaction[]
  ClassSchedule ClassSchedule? @relation(fields: [classScheduleId], references: [id])

  @@map("student")
}

enum TeacherStatus {
  ACTIVE
  ON_LEAVE
  RESIGNED
}

model Teacher {
  id            Int           @id @default(autoincrement())
  name          String
  noTelp        String        @unique @map("no_telp")
  status        TeacherStatus @default(ACTIVE)
  nip           String?
  accountNumber String?       @map("account_number")
  accountName   String?       @map("account_name")
  bankName      String?       @map("bank_name")
  userId        Int           @unique @map("user_id")
  createdAt     DateTime?     @default(now()) @map("created_at")
  createdBy     Int?          @map("created_by")
  updatedAt     DateTime?     @updatedAt @map("updated_at")
  updatedBy     Int?          @map("updated_by")

  User          User            @relation(fields: [userId], references: [id])
  Schedules     Schedule[]
  Tasks         Task[]
  ClassSchedule ClassSchedule[]

  @@map("teacher")
}

model Level {
  id        Int       @id @default(autoincrement())
  level     String    @unique
  isActive  Boolean   @default(true)
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Students      Student[]
  ClassSchedule ClassSchedule[]

  @@map("level")
}

model Time {
  id        Int       @id @default(autoincrement())
  session   String
  startTime Int
  endTime   Int
  isActive  Boolean   @default(true)
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Schedules Schedule[]

  @@map("time")
}

model Day {
  id        Int       @id @default(autoincrement())
  day       String    @unique
  isActive  Boolean   @default(true)
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Schedules Schedule[]

  @@map("day")
}

model BankAccount {
  id            Int       @id @default(autoincrement())
  accountName   String    @map("account_name")
  accountNumber String    @map("account_number")
  bankName      String    @map("bank_name")
  isActive      Boolean   @default(true)
  createdAt     DateTime? @default(now()) @map("created_at")
  createdBy     Int?      @map("created_by")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  updatedBy     Int?      @map("updated_by")

  Transactions Transaction[]

  @@map("bank_account")
}

model TransactionType {
  id        Int       @id @default(autoincrement())
  type      String    @unique
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Transactions Transaction[]

  @@map("transaction_type")
}

// model StudentStatus {
//   id        Int       @id @default(autoincrement())
//   status    String    @unique
//   createdAt DateTime? @default(now()) @map("created_at")
//   createdBy Int?      @map("created_by")
//   updatedAt DateTime? @updatedAt @map("updated_at")
//   updatedBy Int?      @map("updated_by")
//
//   Students Student[]
//
//   @@map("student_status")
// }

model TransactionStatus {
  id        Int       @id @default(autoincrement())
  status    String    @unique
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  @@map("transaction_status")
}

model ClassPrice {
  id        Int       @id @default(autoincrement())
  price     Int
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Classes Class[]

  @@map("class_price")
}

model Batch {
  id        Int       @id @default(autoincrement())
  batch     String
  year      Int
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Classes Class[]

  @@map("batch")
}

model Class {
  id           Int       @id @default(autoincrement())
  class        String
  classPriceId Int       @map("class_price_id")
  batchId      Int?      @map("batch_id")
  createdAt    DateTime? @default(now()) @map("created_at")
  createdBy    Int?      @map("created_by")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  updatedBy    Int?      @map("updated_by")

  ClassPrice  ClassPrice   @relation(fields: [classPriceId], references: [id])
  Batch       Batch?       @relation(fields: [batchId], references: [id])
  Students    Student[]
  Modules     Module[]
  Schedules   Schedule[]
  Enrollments Enrollment[]

  @@map("class")
}

model Schedule {
  id        Int       @id @default(autoincrement())
  dayId     Int       @map("day_id")
  timeId    Int       @map("time_id")
  classType ClassType @default(OFFLINE)
  isActive  Boolean   @default(true)
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Day            Day?             @relation(fields: [dayId], references: [id])
  Time           Time?            @relation(fields: [timeId], references: [id])
  Attendances    Attendance[]
  Teacher        Teacher?         @relation(fields: [teacherId], references: [id])
  teacherId      Int?
  Class          Class?           @relation(fields: [classId], references: [id])
  classId        Int?
  Event          Event[]
  AcademicPeriod AcademicPeriod[]
  Enrollment     Enrollment[]
  ClassSchedule  ClassSchedule[]

  @@map("schedule")
}

model Module {
  id        Int       @id @default(autoincrement())
  classId   Int       @map("class_id")
  module    String
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Class      Class       @relation(fields: [classId], references: [id])
  Components Component[]
  Tasks      Task[]

  @@map("module")
}

model Component {
  id        Int       @id @default(autoincrement())
  moduleId  Int       @map("module_id")
  component String
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Module Module @relation(fields: [moduleId], references: [id])

  @@map("component")
}

model Task {
  id        Int       @id @default(autoincrement())
  moduleId  Int       @map("module_id")
  teacherId Int       @map("teacher_id")
  task      String
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Module  Module   @relation(fields: [moduleId], references: [id])
  Teacher Teacher? @relation(fields: [teacherId], references: [id])
  Scores  Score[]

  @@map("task")
}

model Score {
  id        Int       @id @default(autoincrement())
  value     Int
  studentId Int       @map("student_id")
  taskId    Int       @map("task_id")
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Student Student @relation(fields: [studentId], references: [id])
  Task    Task    @relation(fields: [taskId], references: [id])

  @@map("score")
}

enum AttendanceStatus {
  ABSENT
  PRESENT
  EXCUSED
}

model Attendance {
  id         Int              @id @default(autoincrement())
  attendance AttendanceStatus
  studentId  Int              @map("student_id")
  scheduleId Int              @map("schedule_id")
  createdAt  DateTime?        @default(now()) @map("created_at")
  createdBy  Int?             @map("created_by")
  updatedAt  DateTime?        @updatedAt @map("updated_at")
  updatedBy  Int?             @map("updated_by")

  Student  Student  @relation(fields: [studentId], references: [id])
  Schedule Schedule @relation(fields: [scheduleId], references: [id])

  @@map("attendance")
}

model Bill {
  id          Int       @id @default(autoincrement())
  studentId   Int       @map("student_id")
  bill        Int
  remainBill  Int       @map("remain_bill")
  description String?
  createdAt   DateTime? @default(now()) @map("created_at")
  createdBy   Int?      @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   Int?      @map("updated_by")

  Student      Student       @relation(fields: [studentId], references: [id])
  Transactions Transaction[]

  @@map("bill")
}

enum TransactionStatusEnum {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

model Transaction {
  id                Int                   @id @default(autoincrement())
  bankAccountId     Int?                  @map("bank_account_id")
  billId            Int                   @map("bill_id")
  transactionType   FeeType               @default(DOWN_PAYMENT) @map("transaction_type")
  transactionStatus TransactionStatusEnum @default(PENDING) @map("transaction_status")
  amount            Decimal
  studentId         Int?                  @map("student_id")

  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  BankAccount       BankAccount?     @relation(fields: [bankAccountId], references: [id])
  Bill              Bill?            @relation(fields: [billId], references: [id])
  Event             Event[]
  TransactionType   TransactionType? @relation(fields: [transactionTypeId], references: [id])
  transactionTypeId Int?
  Student           Student?         @relation(fields: [studentId], references: [id])

  @@map("transaction")
}

enum Education {
  SMA
  SARJANA
  MAGISTER
}

enum Program {
  DASAR
  MENENGAH
  LANJUTAN
}

enum ClassType {
  ONLINE
  OFFLINE
}

enum TimeOfStudy {
  MORNING
  AFTERNOON
}

model Enrollment {
  id                Int       @id @default(autoincrement())
  fullName          String    @map("full_name")
  dateOfBirth       DateTime  @map("date_of_birth")
  noTelp            String    @unique @map("no_telp")
  email             String    @map("email")
  lastEducation     Education @map("last_education")
  program           Program
  classType         ClassType @map("class_type")
  timeOfStudyId     Int       @map("time_of_study_id")
  motivation        String
  voiceRecording    String?   @map("voice_recording")
  dateOfReservation DateTime? @map("date_of_reservation")
  academicPeriodId  Int       @map("academic_period_id")
  userId            Int       @map("user_id")
  classId           Int?      @map("class_id")
  createdAt         DateTime? @default(now()) @map("created_at")
  createdBy         Int?      @map("created_by")
  updatedAt         DateTime? @updatedAt @map("updated_at")
  updatedBy         Int?      @map("updated_by")

  AcademicPeriod AcademicPeriod? @relation(fields: [academicPeriodId], references: [id])
  User           User?           @relation(fields: [userId], references: [id])
  Class          Class?          @relation(fields: [classId], references: [id])
  Students       Student[]
  Schedule       Schedule?       @relation(fields: [timeOfStudyId], references: [id])

  @@map("enrollment")
}

model Announcement {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime? @default(now()) @map("created_at")
  createdBy   Int?      @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   Int?      @map("updated_by")

  @@map("announcement")
}

model Event {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  isActive  Boolean   @default(true)
  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Schedule         Schedule[]
  Transaction      Transaction[]
  AcademicCalendar AcademicCalendar[]

  @@map("event")
}

model AcademicPeriod {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  startDate   DateTime
  endDate     DateTime
  description String?
  isActive    Boolean   @default(false)
  createdAt   DateTime? @default(now()) @map("created_at")
  createdBy   Int?      @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   Int?      @map("updated_by")

  // Relations
  Schedules        Schedule[]
  AcademicCalendar AcademicCalendar[]
  PaymentFee       PaymentFee[]
  Enrollment       Enrollment[]

  @@map("academic_period")
}

model AcademicCalendar {
  id               Int            @id @default(autoincrement())
  academicPeriodId Int            @map("academic_period_id")
  eventId          Int            @map("event_id")
  startDate        DateTime
  endDate          DateTime
  isActive         Boolean        @default(true)
  createdAt        DateTime?      @default(now()) @map("created_at")
  createdBy        Int?           @map("created_by")
  updatedAt        DateTime?      @updatedAt @map("updated_at")
  updatedBy        Int?           @map("updated_by")
  Event            Event          @relation(fields: [eventId], references: [id])
  AcademicPeriod   AcademicPeriod @relation(fields: [academicPeriodId], references: [id])

  @@map("academic_calendar")
}

enum FeeType {
  FULL_TUITION
  DOWN_PAYMENT
  FINAL_INSTALLMENT
}

model PaymentFee {
  id               Int            @id @default(autoincrement())
  academicPeriodId Int            @map("academic_period_id")
  feeType          FeeType
  amount           Decimal
  description      String?
  dueDate          DateTime       @map("due_date")
  isInvoiced       Boolean        @default(false) @map("is_invoiced")
  createdAt        DateTime?      @default(now()) @map("created_at")
  createdBy        Int?           @map("created_by")
  updatedAt        DateTime?      @updatedAt @map("updated_at")
  updatedBy        Int?           @map("updated_by")
  AcademicPeriod   AcademicPeriod @relation(fields: [academicPeriodId], references: [id])

  @@unique([academicPeriodId, feeType])
  @@map("payment_fee")
}

model ClassSchedule {
  id         Int      @id @default(autoincrement())
  name       String   @unique @map("name")
  levelId    Int      @map("level_id")
  scheduleId Int      @map("schedule_id")
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")
  teacherId  Int      @map("teacher_id")
  capacity   Int?     @default(0)
  isActive   Boolean  @default(true)

  createdAt DateTime? @default(now()) @map("created_at")
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy Int?      @map("updated_by")

  Level    Level?    @relation(fields: [levelId], references: [id])
  Schedule Schedule? @relation(fields: [scheduleId], references: [id])
  Teacher  Teacher?  @relation(fields: [teacherId], references: [id])
  Student  Student[]
}
